!function(a){var e={};function t(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return a[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=a,t.c=e,t.d=function(a,e,n){t.o(a,e)||Object.defineProperty(a,e,{enumerable:!0,get:n})},t.r=function(a){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(a,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(a,"__esModule",{value:!0})},t.t=function(a,e){if(1&e&&(a=t(a)),8&e)return a;if(4&e&&"object"==typeof a&&a&&a.__esModule)return a;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:a}),2&e&&"string"!=typeof a)for(var o in a)t.d(n,o,function(e){return a[e]}.bind(null,o));return n},t.n=function(a){var e=a&&a.__esModule?function(){return a.default}:function(){return a};return t.d(e,"a",e),e},t.o=function(a,e){return Object.prototype.hasOwnProperty.call(a,e)},t.p="",t(t.s=1)}([function(a,e,t){},function(a,e,t){"use strict";function n(a){return parseFloat(a).toFixed(3)}function o(a){return{city:a.geonames[0].name,longitude:n(a.geonames[0].lng),latitude:n(a.geonames[0].lat)}}async function i(a,e){console.log(`Inside the localserverpost function ${a} is ${typeof a}`);let t=await fetch(a,{method:"POST",credentials:"same-origin",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});try{let a=await t.json();console.log(""+JSON.stringify(a))}catch(a){console.log(a)}}async function r(){let a={a:document.getElementById("city").value},e=await fetch("http://localhost:3000/geonames",{method:"POST",credentials:"same-origin",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)});try{let a=await e.json();console.log(typeof a,a);let t=o(a);return console.log("newData",t),await i("http://localhost:3000/addcity",t),t}catch(a){console.log("Retrieval ",a)}}async function l(){let a=await fetch("http://localhost:3000/all");try{return await a.json()}catch(a){console.log("Retrieval Error:",a)}}t.r(e),t.d(e,"getCityData",(function(){return r})),t.d(e,"getNewData",(function(){return l})),t.d(e,"uiUpdate",(function(){return u})),t.d(e,"performAction",(function(){return C})),t.d(e,"cityDataExtractor",(function(){return o})),t.d(e,"dateCountdown",(function(){return h})),t.d(e,"validateDateForm",(function(){return d})),t.d(e,"getCityImage",(function(){return A})),t.d(e,"getCountryName",(function(){return m})),t.d(e,"localServerPost",(function(){return i})),t.d(e,"getFullStateName",(function(){return f})),t.d(e,"stringToNumber",(function(){return n})),t.d(e,"weatherBitAPI",(function(){return p}));const s=document.getElementById("date"),c=document.getElementById("temp");async function u(a){let e=await fetch("http://localhost:3000/all");console.log("uiUpdate function in progress");try{let t=await e.json();console.log("uiUpdate "+t),document.getElementById("citypic").style.backgroundImage=`url('./images/${a}.png')`;let n=document.createElement("p"),o=document.createTextNode("Travel Date Info");n.appendChild(o),n.className="title",s.appendChild(n);let i=document.createElement("p"),r=document.createTextNode(`${t.dates[1]} days remaining until you leave on ${t.dates[0]}`);i.appendChild(r),s.appendChild(i);let l=document.createElement("p"),u=document.createTextNode("Destination Weather Info");l.appendChild(u),l.className="title",c.appendChild(l);let d=document.createElement("p");"false"==t.dates[2]?(console.log("Dates[2] is false"),d.innerHTML=`The forecast for ${t.city} in two weeks is ${t.descrip} at ${t.temp}`,c.appendChild(d)):(console.log("Dates[2] is true"),d.innerHTML=`The current forecast for ${t.city} is ${t.descrip} at ${t.temp}`,c.appendChild(d))}catch(a){console.log(a)}}function d(){let a=document.getElementById("traveldate").value;return!0===/^(20)\d\d([-])(0[1-9]|1[012])\2(0[1-9]|[12][0-9]|3[01])$/.test(a)||((a="")?(alert("Future date must be filled out"),!1):(alert("Please reenter your future date in the format YYYY-MM-DD"),!1))}async function h(){let a=await document.getElementById("traveldate").value,e=new Date(a).getTime()-(new Date).getTime(),t=Math.floor(e/864e5),n=[a,t];if(!0===d())return 0==t?(clearInterval(myfunc),document.getElementById("end").innerHTML="Pack Your Bags!!",n.push("true"),console.log(n),await i("http://localhost:3000/traveldate",n),!0):0<t&&t<7?(n.push("true"),console.log(n),await i("http://localhost:3000/traveldate",n),!0):(n.push("false"),console.log(n),await i("http://localhost:3000/traveldate",n),!1);console.log("User did not enter a valid date in form YYYY-MM-DD"),i("http://localhost:3000/traveldate","")}const g={AF:"Afghanistan",AX:"Aland Islands",AL:"Albania",DZ:"Algeria",AS:"American Samoa",AD:"Andorra",AO:"Angola",AI:"Anguilla",AQ:"Antarctica",AG:"Antigua And Barbuda",AR:"Argentina",AM:"Armenia",AW:"Aruba",AU:"Australia",AT:"Austria",AZ:"Azerbaijan",BS:"Bahamas",BH:"Bahrain",BD:"Bangladesh",BB:"Barbados",BY:"Belarus",BE:"Belgium",BZ:"Belize",BJ:"Benin",BM:"Bermuda",BT:"Bhutan",BO:"Bolivia",BA:"Bosnia And Herzegovina",BW:"Botswana",BV:"Bouvet Island",BR:"Brazil",IO:"British Indian Ocean Territory",BN:"Brunei Darussalam",BG:"Bulgaria",BF:"Burkina Faso",BI:"Burundi",KH:"Cambodia",CM:"Cameroon",CA:"Canada",CV:"Cape Verde",KY:"Cayman Islands",CF:"Central African Republic",TD:"Chad",CL:"Chile",CN:"China",CX:"Christmas Island",CC:"Cocos (Keeling) Islands",CO:"Colombia",KM:"Comoros",CG:"Congo",CD:"Congo, Democratic Republic",CK:"Cook Islands",CR:"Costa Rica",CI:"Cote D'Ivoire",HR:"Croatia",CU:"Cuba",CY:"Cyprus",CZ:"Czech Republic",DK:"Denmark",DJ:"Djibouti",DM:"Dominica",DO:"Dominican Republic",EC:"Ecuador",EG:"Egypt",SV:"El Salvador",GQ:"Equatorial Guinea",ER:"Eritrea",EE:"Estonia",ET:"Ethiopia",FK:"Falkland Islands (Malvinas)",FO:"Faroe Islands",FJ:"Fiji",FI:"Finland",FR:"France",GF:"French Guiana",PF:"French Polynesia",TF:"French Southern Territories",GA:"Gabon",GM:"Gambia",GE:"Georgia",DE:"Germany",GH:"Ghana",GI:"Gibraltar",GR:"Greece",GL:"Greenland",GD:"Grenada",GP:"Guadeloupe",GU:"Guam",GT:"Guatemala",GG:"Guernsey",GN:"Guinea",GW:"Guinea-Bissau",GY:"Guyana",HT:"Haiti",HM:"Heard Island & Mcdonald Islands",VA:"Holy See (Vatican City State)",HN:"Honduras",HK:"Hong Kong",HU:"Hungary",IS:"Iceland",IN:"India",ID:"Indonesia",IR:"Iran, Islamic Republic Of",IQ:"Iraq",IE:"Ireland",IM:"Isle Of Man",IL:"Israel",IT:"Italy",JM:"Jamaica",JP:"Japan",JE:"Jersey",JO:"Jordan",KZ:"Kazakhstan",KE:"Kenya",KI:"Kiribati",KR:"Korea",KW:"Kuwait",KG:"Kyrgyzstan",LA:"Lao People's Democratic Republic",LV:"Latvia",LB:"Lebanon",LS:"Lesotho",LR:"Liberia",LY:"Libyan Arab Jamahiriya",LI:"Liechtenstein",LT:"Lithuania",LU:"Luxembourg",MO:"Macao",MK:"Macedonia",MG:"Madagascar",MW:"Malawi",MY:"Malaysia",MV:"Maldives",ML:"Mali",MT:"Malta",MH:"Marshall Islands",MQ:"Martinique",MR:"Mauritania",MU:"Mauritius",YT:"Mayotte",MX:"Mexico",FM:"Micronesia, Federated States Of",MD:"Moldova",MC:"Monaco",MN:"Mongolia",ME:"Montenegro",MS:"Montserrat",MA:"Morocco",MZ:"Mozambique",MM:"Myanmar",NA:"Namibia",NR:"Nauru",NP:"Nepal",NL:"Netherlands",AN:"Netherlands Antilles",NC:"New Caledonia",NZ:"New Zealand",NI:"Nicaragua",NE:"Niger",NG:"Nigeria",NU:"Niue",NF:"Norfolk Island",MP:"Northern Mariana Islands",NO:"Norway",OM:"Oman",PK:"Pakistan",PW:"Palau",PS:"Palestinian Territory, Occupied",PA:"Panama",PG:"Papua New Guinea",PY:"Paraguay",PE:"Peru",PH:"Philippines",PN:"Pitcairn",PL:"Poland",PT:"Portugal",PR:"Puerto Rico",QA:"Qatar",RE:"Reunion",RO:"Romania",RU:"Russian Federation",RW:"Rwanda",BL:"Saint Barthelemy",SH:"Saint Helena",KN:"Saint Kitts And Nevis",LC:"Saint Lucia",MF:"Saint Martin",PM:"Saint Pierre And Miquelon",VC:"Saint Vincent And Grenadines",WS:"Samoa",SM:"San Marino",ST:"Sao Tome And Principe",SA:"Saudi Arabia",SN:"Senegal",RS:"Serbia",SC:"Seychelles",SL:"Sierra Leone",SG:"Singapore",SK:"Slovakia",SI:"Slovenia",SB:"Solomon Islands",SO:"Somalia",ZA:"South Africa",GS:"South Georgia And Sandwich Isl.",ES:"Spain",LK:"Sri Lanka",SD:"Sudan",SR:"Suriname",SJ:"Svalbard And Jan Mayen",SZ:"Swaziland",SE:"Sweden",CH:"Switzerland",SY:"Syrian Arab Republic",TW:"Taiwan",TJ:"Tajikistan",TZ:"Tanzania",TH:"Thailand",TL:"Timor-Leste",TG:"Togo",TK:"Tokelau",TO:"Tonga",TT:"Trinidad And Tobago",TN:"Tunisia",TR:"Turkey",TM:"Turkmenistan",TC:"Turks And Caicos Islands",TV:"Tuvalu",UG:"Uganda",UA:"Ukraine",AE:"United Arab Emirates",GB:"United Kingdom",US:"United States",UM:"United States Outlying Islands",UY:"Uruguay",UZ:"Uzbekistan",VU:"Vanuatu",VE:"Venezuela",VN:"Viet Nam",VG:"Virgin Islands, British",VI:"Virgin Islands, U.S.",WF:"Wallis And Futuna",EH:"Western Sahara",YE:"Yemen",ZM:"Zambia",ZW:"Zimbabwe"};function m(a){return g.hasOwnProperty(a)?g[a]:a}async function p(a){let e=await fetch("http://localhost:3000/weatherbit");console.log("weatherbit data: ",e);try{let t=await e.json();console.log("fetchData",t);let n=m(t.country_code),o={country:n,statecode:t.state_code,temp:t.data[15].temp,descrip:t.data[15].weather.description},r={country:n,statecode:t.state_code,temp:t.data[0].temp,descrip:t.data[0].weather.description};"false"==a.dates[2]?(console.log(typeof o+o+' has reached the beginning of localserverpost "forecastpost"'),await i("http://localhost:3000/forecastpost",o)):(console.log(typeof r+'has reached the beginning of localserverpost "weatherpost"'),await i("http://localhost:3000/weatherpost",r))}catch(a){console.log(a)}}const y={AL:"Alabama",AK:"Alaska",AS:"American Samoa",AZ:"Arizona",AR:"Arkansas",CA:"California",CO:"Colorado",CT:"Connecticut",DE:"Delaware",DC:"District Of Columbia",FM:"Federated States Of Micronesia",FL:"Florida",GA:"Georgia",GU:"Guam",HI:"Hawaii",ID:"Idaho",IL:"Illinois",IN:"Indiana",IA:"Iowa",KS:"Kansas",KY:"Kentucky",LA:"Louisiana",ME:"Maine",MH:"Marshall Islands",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MN:"Minnesota",MS:"Mississippi",MO:"Missouri",MT:"Montana",NE:"Nebraska",NV:"Nevada",NH:"New Hampshire",NJ:"New Jersey",NM:"New Mexico",NY:"New York",NC:"North Carolina",ND:"North Dakota",MP:"Northern Mariana Islands",OH:"Ohio",OK:"Oklahoma",OR:"Oregon",PW:"Palau",PA:"Pennsylvania",PR:"Puerto Rico",RI:"Rhode Island",SC:"South Carolina",SD:"South Dakota",TN:"Tennessee",TX:"Texas",UT:"Utah",VT:"Vermont",VI:"Virgin Islands",VA:"Virginia",WA:"Washington",WV:"West Virginia",WI:"Wisconsin",WY:"Wyoming"};function f(a){return y[a]}let M,S,I;async function A(a){M=a.city,S=a.country,I=a.statecode;let e=await fetch("http://localhost:3000/pixabay");try{let a=await e.json();if(console.log("image api response",a),0==a.totalHits&&"United States"==S){let a=f(I);console.log(a);let e={a:a};try{let t=await i("http://localhost:3000/pixabaystate",e),n=await t.json();console.log(n);let o={url:n.hits[0].webformatURL,qstring:a},r=await i("http://localhost:3000/imageurlpost",o);console.log("stateimageobject sent to imageurlpost");let l=await r.json();return decodeURIComponent(l)}catch(a){console.log(a)}}else if(0==a.totalHits&&"United States"!=S){console.log(S);try{let a=await fetch("http://localhost:3000/pixabaycountry"),e={url:(await a.json()).hits[0].webformatURL,qstring:S},t=await i("http://localhost:3000/imageurlpost",e);console.log("countryimageobject sent to imageurlpost");let n=await t.json();return decodeURIComponent(n)}catch(a){console.log(a)}}else{let e={url:a.hits[0].webformatURL,qstring:M};console.log(`${typeof e} ${e}`);try{return await i("http://localhost:3000/imageurlpost",e),console.log("imageobject sent to imageurlpost"),decodeURIComponent(M)}catch(a){console.log(a)}}}catch(a){console.log(a)}}async function C(a){r().then(()=>h()).then(()=>l()).then(a=>p(a)).then(()=>l()).then(a=>A(a)).then(a=>u(a)).catch(a=>{console.log(a)})}t(0);document.getElementById("generate").onclick=C}]);