!function(e){var a={};function t(n){if(a[n])return a[n].exports;var o=a[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=a,t.d=function(e,a,n){t.o(e,a)||Object.defineProperty(e,a,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,a){if(1&a&&(e=t(e)),8&a)return e;if(4&a&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&a&&"string"!=typeof e)for(var o in e)t.d(n,o,function(a){return e[a]}.bind(null,o));return n},t.n=function(e){var a=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(a,"a",a),a},t.o=function(e,a){return Object.prototype.hasOwnProperty.call(e,a)},t.p="",t(t.s=1)}([function(e,a,t){},function(e,a,t){"use strict";function n(e){return parseFloat(e).toFixed(3)}function o(e){return{city:e.geonames[0].name,longitude:n(e.geonames[0].lng),latitude:n(e.geonames[0].lat)}}async function i(e,a){console.log(`Inside the localserverpost function ${e} is ${typeof e}`);let t=await fetch(e,{method:"POST",credentials:"same-origin",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)});try{let e=await t.json();console.log(""+JSON.stringify(e))}catch(e){console.log(e)}}t.r(a),t.d(a,"getCityData",(function(){return r})),t.d(a,"getNewData",(function(){return l})),t.d(a,"uiUpdate",(function(){return g})),t.d(a,"performAction",(function(){return b})),t.d(a,"cityDataExtractor",(function(){return o})),t.d(a,"dateCountdown",(function(){return c})),t.d(a,"validateDateForm",(function(){return s})),t.d(a,"getCityImage",(function(){return N})),t.d(a,"getCountryName",(function(){return p})),t.d(a,"localServerPost",(function(){return i})),t.d(a,"getFullStateName",(function(){return M})),t.d(a,"stringToNumber",(function(){return n})),t.d(a,"weatherBitAPI",(function(){return y})),t.d(a,"weatherFetch",(function(){return m}));async function r(){let e=`http://api.geonames.org/searchJSON?name=${document.getElementById("city").value}&maxRows=1&type=json&username=mattyloco`;const a=await fetch(e);try{let e=o(await a.json());return console.log("newData",e),await i("http://localhost:3000/addcity",e),e}catch(e){console.log("Retrieval",e)}}async function l(){let e=await fetch("http://localhost:3000/all");try{let a=await e.json();for(let[e,t]of Object.entries(a))console.log(`${e}: ${t}`);return a}catch(e){console.log("Retrieval Error:",e)}}function s(){let e=document.getElementById("traveldate").value;return!0===/^(20)\d\d([-])(0[1-9]|1[012])\2(0[1-9]|[12][0-9]|3[01])$/.test(e)||((e="")?(alert("Future date must be filled out"),!1):(alert("Please reenter your future date in the format YYYY-MM-DD"),!1))}async function c(){let e=await document.getElementById("traveldate").value,a=new Date(e).getTime()-(new Date).getTime(),t=Math.floor(a/864e5),n=[e,t];if(!0===s())return console.log(e),0==t?(clearInterval(myfunc),document.getElementById("end").innerHTML="Pack Your Bags!!",!0):0<t&&t<7?(await i("http://localhost:3000/traveldate",n),!0):(await i("http://localhost:3000/traveldate",n),!1);return console.log("User did not enter a valid date in form YYYY-MM-DD"),i("http://localhost:3000/traveldate",""),!1}const u=document.getElementById("date"),d=document.getElementById("temp");async function g(){let e=await fetch("http://localhost:3000/all");try{let a=await e.json();document.getElementById("citypic").style.backgroundImage=`url('/images/${a.city}').png`;let t=document.createElement("p"),n=document.createTextNode("Travel Date Info");t.appendChild(n),t.className="title",u.appendChild(t);let o=document.createElement("p"),i=document.createTextNode(`${a.dates[1]} days remaining until you leave on ${a.dates[0]}`);o.appendChild(i),u.appendChild(o);let r=document.createElement("p"),l=document.createTextNode("Destination Weather Info");r.appendChild(l),r.className="title",d.appendChild(r);let s=document.createElement("p");!1===c()?s.innerHTML=`The forecast for ${a.city} in two weeks is ${a.descrip} at ${a.temp}`:s.innerHTML=`The current forecast for ${a.city} is ${a.descrip} at ${a.temp}`,d.appendChild(s)}catch(e){console.log(e)}}async function m(e){let a=await fetch(e);try{let e=await a.json();for(let[a,t]of Object.entries(e))console.log(`${a}: ${t}`);return console.log(""+typeof e),e}catch(e){console.log(e)}}const h={AF:"Afghanistan",AX:"Aland Islands",AL:"Albania",DZ:"Algeria",AS:"American Samoa",AD:"Andorra",AO:"Angola",AI:"Anguilla",AQ:"Antarctica",AG:"Antigua And Barbuda",AR:"Argentina",AM:"Armenia",AW:"Aruba",AU:"Australia",AT:"Austria",AZ:"Azerbaijan",BS:"Bahamas",BH:"Bahrain",BD:"Bangladesh",BB:"Barbados",BY:"Belarus",BE:"Belgium",BZ:"Belize",BJ:"Benin",BM:"Bermuda",BT:"Bhutan",BO:"Bolivia",BA:"Bosnia And Herzegovina",BW:"Botswana",BV:"Bouvet Island",BR:"Brazil",IO:"British Indian Ocean Territory",BN:"Brunei Darussalam",BG:"Bulgaria",BF:"Burkina Faso",BI:"Burundi",KH:"Cambodia",CM:"Cameroon",CA:"Canada",CV:"Cape Verde",KY:"Cayman Islands",CF:"Central African Republic",TD:"Chad",CL:"Chile",CN:"China",CX:"Christmas Island",CC:"Cocos (Keeling) Islands",CO:"Colombia",KM:"Comoros",CG:"Congo",CD:"Congo, Democratic Republic",CK:"Cook Islands",CR:"Costa Rica",CI:"Cote D'Ivoire",HR:"Croatia",CU:"Cuba",CY:"Cyprus",CZ:"Czech Republic",DK:"Denmark",DJ:"Djibouti",DM:"Dominica",DO:"Dominican Republic",EC:"Ecuador",EG:"Egypt",SV:"El Salvador",GQ:"Equatorial Guinea",ER:"Eritrea",EE:"Estonia",ET:"Ethiopia",FK:"Falkland Islands (Malvinas)",FO:"Faroe Islands",FJ:"Fiji",FI:"Finland",FR:"France",GF:"French Guiana",PF:"French Polynesia",TF:"French Southern Territories",GA:"Gabon",GM:"Gambia",GE:"Georgia",DE:"Germany",GH:"Ghana",GI:"Gibraltar",GR:"Greece",GL:"Greenland",GD:"Grenada",GP:"Guadeloupe",GU:"Guam",GT:"Guatemala",GG:"Guernsey",GN:"Guinea",GW:"Guinea-Bissau",GY:"Guyana",HT:"Haiti",HM:"Heard Island & Mcdonald Islands",VA:"Holy See (Vatican City State)",HN:"Honduras",HK:"Hong Kong",HU:"Hungary",IS:"Iceland",IN:"India",ID:"Indonesia",IR:"Iran, Islamic Republic Of",IQ:"Iraq",IE:"Ireland",IM:"Isle Of Man",IL:"Israel",IT:"Italy",JM:"Jamaica",JP:"Japan",JE:"Jersey",JO:"Jordan",KZ:"Kazakhstan",KE:"Kenya",KI:"Kiribati",KR:"Korea",KW:"Kuwait",KG:"Kyrgyzstan",LA:"Lao People's Democratic Republic",LV:"Latvia",LB:"Lebanon",LS:"Lesotho",LR:"Liberia",LY:"Libyan Arab Jamahiriya",LI:"Liechtenstein",LT:"Lithuania",LU:"Luxembourg",MO:"Macao",MK:"Macedonia",MG:"Madagascar",MW:"Malawi",MY:"Malaysia",MV:"Maldives",ML:"Mali",MT:"Malta",MH:"Marshall Islands",MQ:"Martinique",MR:"Mauritania",MU:"Mauritius",YT:"Mayotte",MX:"Mexico",FM:"Micronesia, Federated States Of",MD:"Moldova",MC:"Monaco",MN:"Mongolia",ME:"Montenegro",MS:"Montserrat",MA:"Morocco",MZ:"Mozambique",MM:"Myanmar",NA:"Namibia",NR:"Nauru",NP:"Nepal",NL:"Netherlands",AN:"Netherlands Antilles",NC:"New Caledonia",NZ:"New Zealand",NI:"Nicaragua",NE:"Niger",NG:"Nigeria",NU:"Niue",NF:"Norfolk Island",MP:"Northern Mariana Islands",NO:"Norway",OM:"Oman",PK:"Pakistan",PW:"Palau",PS:"Palestinian Territory, Occupied",PA:"Panama",PG:"Papua New Guinea",PY:"Paraguay",PE:"Peru",PH:"Philippines",PN:"Pitcairn",PL:"Poland",PT:"Portugal",PR:"Puerto Rico",QA:"Qatar",RE:"Reunion",RO:"Romania",RU:"Russian Federation",RW:"Rwanda",BL:"Saint Barthelemy",SH:"Saint Helena",KN:"Saint Kitts And Nevis",LC:"Saint Lucia",MF:"Saint Martin",PM:"Saint Pierre And Miquelon",VC:"Saint Vincent And Grenadines",WS:"Samoa",SM:"San Marino",ST:"Sao Tome And Principe",SA:"Saudi Arabia",SN:"Senegal",RS:"Serbia",SC:"Seychelles",SL:"Sierra Leone",SG:"Singapore",SK:"Slovakia",SI:"Slovenia",SB:"Solomon Islands",SO:"Somalia",ZA:"South Africa",GS:"South Georgia And Sandwich Isl.",ES:"Spain",LK:"Sri Lanka",SD:"Sudan",SR:"Suriname",SJ:"Svalbard And Jan Mayen",SZ:"Swaziland",SE:"Sweden",CH:"Switzerland",SY:"Syrian Arab Republic",TW:"Taiwan",TJ:"Tajikistan",TZ:"Tanzania",TH:"Thailand",TL:"Timor-Leste",TG:"Togo",TK:"Tokelau",TO:"Tonga",TT:"Trinidad And Tobago",TN:"Tunisia",TR:"Turkey",TM:"Turkmenistan",TC:"Turks And Caicos Islands",TV:"Tuvalu",UG:"Uganda",UA:"Ukraine",AE:"United Arab Emirates",GB:"United Kingdom",US:"United States",UM:"United States Outlying Islands",UY:"Uruguay",UZ:"Uzbekistan",VU:"Vanuatu",VE:"Venezuela",VN:"Viet Nam",VG:"Virgin Islands, British",VI:"Virgin Islands, U.S.",WF:"Wallis And Futuna",EH:"Western Sahara",YE:"Yemen",ZM:"Zambia",ZW:"Zimbabwe"};function p(e){return h.hasOwnProperty(e)?h[e]:e}async function y(){let e=await l();try{let a=e.latitude,t=e.longitude;let n=`https://api.weatherbit.io/v2.0/forecast/daily?lat=${a}&lon=${t}&units=I&key=${"ed272d7050954d248e5c7d3f9dd80768"}`;console.log(`Latitude ${a} longitude ${t}`);try{let e=await m(n);console.log("fetchData",e);let a=p(e.country_code),t={country:a,statecode:e.state_code,temp:e.data[15].temp,descrip:e.data[15].weather.description},o={country:a,statecode:e.state_code,temp:e.data[0].temp,descrip:e.data[0].weather.description},r=await c();console.log("dateCountdownResult",r),!1===r?(console.log(typeof e+e+' has reached the beginning of localserverpost "forecastpost"'),await i("http://localhost:3000/forecastpost",t)):(console.log(typeof e+'has reached the beginning of localserverpost "weatherpost"'),await i("http://localhost:3000/weatherpost",o))}catch(e){console.log(e)}}catch(e){console.log(e)}}const f={AL:"Alabama",AK:"Alaska",AS:"American Samoa",AZ:"Arizona",AR:"Arkansas",CA:"California",CO:"Colorado",CT:"Connecticut",DE:"Delaware",DC:"District Of Columbia",FM:"Federated States Of Micronesia",FL:"Florida",GA:"Georgia",GU:"Guam",HI:"Hawaii",ID:"Idaho",IL:"Illinois",IN:"Indiana",IA:"Iowa",KS:"Kansas",KY:"Kentucky",LA:"Louisiana",ME:"Maine",MH:"Marshall Islands",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MN:"Minnesota",MS:"Mississippi",MO:"Missouri",MT:"Montana",NE:"Nebraska",NV:"Nevada",NH:"New Hampshire",NJ:"New Jersey",NM:"New Mexico",NY:"New York",NC:"North Carolina",ND:"North Dakota",MP:"Northern Mariana Islands",OH:"Ohio",OK:"Oklahoma",OR:"Oregon",PW:"Palau",PA:"Pennsylvania",PR:"Puerto Rico",RI:"Rhode Island",SC:"South Carolina",SD:"South Dakota",TN:"Tennessee",TX:"Texas",UT:"Utah",VT:"Vermont",VI:"Virgin Islands",VA:"Virginia",WA:"Washington",WV:"West Virginia",WI:"Wisconsin",WY:"Wyoming"};function M(e){return f[e]}const S="16829835-98777d95523cd749144425052";let I,A,C;async function N(e){console.log("getCityImage data "+e),I=e.city,A=e.country,C=e.statecode;let a=encodeURIComponent(I);console.log("encodeURIComponent result",a);let t=`https://pixabay.com/api/?key=${S}&q=${a}&image_type=photo`,n=await fetch(t);try{let e=await n.json();if(console.log("image api response",e),0==e.totalHits&&"United States"==A){let e=M(C);console.log(e);let a=encodeURIComponent(e);console.log(a);let t=`https://pixabay.com/api/?key=${S}&q=${a}&image_type=photo`;try{let a=await fetch(t),n=await a.json();console.log(n);let o={url:n.hits[0].webformatURL,qstring:e};await i("http://localhost:3000/imageurlpost",o),console.log("stateimageobject sent to imageurlpost")}catch(e){console.log(e)}}else if(0==e.totalHits&&"United States"!=A){let e=encodeURIComponent(A);console.log("encoded Country "+e);let a=`https://pixabay.com/api/?key=${S}&q=${e}&image_type=photo`;try{let e=await fetch(a),t={url:(await e.json()).hits[0].webformatURL,qstring:A};await i("http://localhost:3000/imageurlpost",t),console.log("countryimageobject sent to imageurlpost")}catch(e){console.log(e)}}else{let a={url:e.hits[0].webformatURL,qstring:I};console.log(`${typeof a} ${a}`),await i("http://localhost:3000/imageurlpost",a),console.log("imageobject sent to imageurlpost")}}catch(e){console.log(e)}}async function b(e){r().then(()=>c()).then(()=>y()).then(()=>l()).then(e=>{N(e)}).then(()=>{g()}).catch(e=>{console.log(e)})}t(0);document.getElementById("generate").onclick=b}]);